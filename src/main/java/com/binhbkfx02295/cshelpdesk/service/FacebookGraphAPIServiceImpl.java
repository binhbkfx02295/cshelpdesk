package com.binhbkfx02295.cshelpdesk.service;

import com.binhbkfx02295.cshelpdesk.config.FacebookAPIProperties;
import com.binhbkfx02295.cshelpdesk.dto.FacebookTokenResponseDTO;
import com.binhbkfx02295.cshelpdesk.dto.FacebookUserProfileDTO;
import com.binhbkfx02295.cshelpdesk.entity.FacebookToken;
import com.binhbkfx02295.cshelpdesk.repository.FacebookTokenRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class FacebookGraphAPIServiceImpl implements FacebookGraphAPIService {

    private final FacebookTokenRepository tokenRepository;
    private final FacebookAPIProperties facebookApiProperties;
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    @Override
    public FacebookToken saveShortLivedToken(String shortLivedToken) {
        log.info("üëâ ƒêang g·ª≠i y√™u c·∫ßu ƒë·ªïi token ng·∫Øn h·∫°n sang token d√†i h·∫°n...");

        String url = String.format("https://graph.facebook.com/oauth/access_token"
                        + "?grant_type=fb_exchange_token"
                        + "&client_id=%s"
                        + "&client_secret=%s"
                        + "&fb_exchange_token=%s",
                facebookApiProperties.getAppId(),
                facebookApiProperties.getAppSecret(),
                shortLivedToken);

        FacebookTokenResponseDTO response = restTemplate.getForObject(url, FacebookTokenResponseDTO.class);

        if (response == null || response.getAccessToken() == null) {
            log.error("‚ùå Kh√¥ng th·ªÉ l·∫•y access token t·ª´ Facebook!");
            throw new IllegalStateException("Kh√¥ng th·ªÉ l·∫•y access token t·ª´ Facebook");
        }

        FacebookToken token = new FacebookToken();
        token.setPageId(facebookApiProperties.getPageId());
        token.setLongLivedAccessToken(response.getAccessToken());
        token.setLastUpdated(LocalDateTime.now());
        token.setExpiresAt(LocalDateTime.now().plusSeconds(response.getExpiresIn()));

        log.info("‚úÖ Token d√†i h·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u th√†nh c√¥ng.");
        return tokenRepository.save(token);
    }

    @Override
    public String getValidAccessToken() {
        log.info("üîç ƒêang ki·ªÉm tra token h·ª£p l·ªá cho Page ID: {}", facebookApiProperties.getPageId());
        FacebookToken token;
        Optional<FacebookToken> optionalToken =
                tokenRepository.findFirstByPageIdOrderByLastUpdatedDesc(facebookApiProperties.getPageId());

        if (optionalToken.isPresent()) {
            token = optionalToken.get();
        } else {
            token = new FacebookToken();
            token.setPageId(facebookApiProperties.getPageId());
            token.setLongLivedAccessToken(facebookApiProperties.getDefaultShortToken()); // d√πng token c·∫•u h√¨nh
            token.setExpiresAt(LocalDateTime.now().plusDays(60)); // m·∫∑c ƒë·ªãnh 60 ng√†y k·ªÉ t·ª´ gi·ªù
            token.setLastUpdated(LocalDateTime.now());
        }

        // Ki·ªÉm tra h·∫°n token
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime expiresAt = token.getExpiresAt();

        if (expiresAt.isBefore(now) || expiresAt.isEqual(now)) {
            log.warn("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n. ƒêang l√†m m·ªõi token...");
            return saveShortLivedToken(token.getLongLivedAccessToken()).getLongLivedAccessToken();
        } else if (Duration.between(now, expiresAt).toDays() <= 3) {
            log.warn("‚ö†Ô∏è Token s·∫Øp h·∫øt h·∫°n trong {} ng√†y. ƒêang l√†m m·ªõi token...", Duration.between(now, expiresAt).toDays());
            return saveShortLivedToken(token.getLongLivedAccessToken()).getLongLivedAccessToken();
        } else {
            log.info("‚úÖ Token hi·ªán t·∫°i v·∫´n c√≤n hi·ªáu l·ª±c. C√≤n {} ng√†y ƒë·∫øn h·∫°n.", Duration.between(now, expiresAt).toDays());
            return token.getLongLivedAccessToken();
        }
    }

    @Override
    public FacebookUserProfileDTO getUserProfile(String userId) {
        log.info("üì• ƒêang l·∫•y th√¥ng tin ng∆∞·ªùi d√πng Facebook v·ªõi ID: {}", userId);

        String token = getValidAccessToken();
        String url = buildProfileUrl(userId, token);

        try {
            return restTemplate.getForObject(url, FacebookUserProfileDTO.class);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è G·∫∑p l·ªói khi g·ªçi API l·∫•y profile: {}", e.getMessage());
            if (e.getMessage().contains("code\":190")) {
                log.info("üîÑ Token c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n. ƒêang l√†m m·ªõi token v√† th·ª≠ l·∫°i...");
                String newToken = saveShortLivedToken(token).getLongLivedAccessToken();
                String retryUrl = buildProfileUrl(userId, newToken);
                return restTemplate.getForObject(retryUrl, FacebookUserProfileDTO.class);
            }
            log.error("‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c khi l·∫•y profile t·ª´ Facebook", e);
            return null;
        }
    }

    @Override
    public void notifyNoAssignee(String senderId) {
        log.info("üîî ƒêang g·ª≠i th√¥ng b√°o cho kh√°ch h√†ng (senderId={}): kh√¥ng c√≥ nh√¢n vi√™n h·ªó tr·ª£.", senderId);

        String token = getValidAccessToken();
        String url = String.format("https://graph.facebook.com/v19.0/me/messages?access_token=%s", token);

        // 1. T·∫°o HashMap cho recipient v√† message
        Map<String, Object> payload = new HashMap<>();
        Map<String, String> recipient = new HashMap<>();
        recipient.put("id", senderId);
        Map<String, String> message = new HashMap<>();
        message.put("text", "Hi, hi·ªán ch∆∞a c√≥ nh√¢n vi√™n h·ªó tr·ª£ ngay l√∫c n√†y. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ. Xin c·∫£m ∆°n!");
        payload.put("recipient", recipient);
        payload.put("message", message);

        try {
            // 2. Chuy·ªÉn HashMap th√†nh JSON string
            String jsonPayload = objectMapper.writeValueAsString(payload);

            // 3. G·ª≠i POST request
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<String> request = new HttpEntity<>(jsonPayload, headers);

            String response = restTemplate.postForObject(url, request, String.class);
            log.info("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho kh√°ch h√†ng th√†nh c√¥ng. Response: {}", response);
        } catch (Exception e) {
            log.error("‚ùå G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng th·∫•t b·∫°i", e);
        }
    }

    private String buildProfileUrl(String userId, String token) {
        return String.format("https://graph.facebook.com/%s?fields=id,first_name,last_name,picture,email&access_token=%s",
                userId, token);
    }
}
